<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- Module Metadata -->
  <parent>
    <groupId>com.wcinformatics.umls.server</groupId>
    <artifactId>term-server-parent</artifactId>
    <version>1.5.1-fg-rc</version>
    <relativePath>../../parent</relativePath>
  </parent>

  <artifactId>term-server-admin-qa</artifactId>
  <name>Terminology server admin QA tool</name>
  <description>Used for performing system wide QA checks</description>
  <packaging>pom</packaging>

  <profiles>


    <!-- Database QA, specify -Drun.config.umls=... -->
    <profile>
      <id>Database</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.wcinformatics.umls.server</groupId>
            <artifactId>term-server-admin-mojo</artifactId>
            <version>${project.version}</version>
            <executions>
              <execution>
                <id>qa-database</id>
                <phase>package</phase>
                <goals>
                  <goal>qa-database</goal>
                </goals>
                <configuration>
                  <!-- Queries should select >1 fields to avoid issues -->
                  <queries>

                    <!-- Metadata Queries -->

                    <property>
                      <name>Referential integrity AdditionalRelationshipType -
                        domainId</name>
                      <value>
                        SELECT domainId, terminology, version
                        FROM
                        additional_relationship_types a
                        WHERE domainId IS NOT
                        NULL and NOT EXISTS
                        (SELECT *
                        FROM concepts b
                        WHERE
                        a.terminology = b.terminology
                        AND
                        a.version = b.version
                        AND a.domainId = b.terminologyId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity AdditionalRelationshipType -
                        rangeId</name>
                      <value>
                        SELECT rangeId, terminology, version
                        FROM
                        additional_relationship_types a
                        WHERE rangeId IS NOT NULL
                        AND NOT EXISTS
                        (SELECT *
                        FROM concepts b
                        WHERE
                        a.terminology = b.terminology
                        AND
                        a.version = b.version
                        AND a.rangeId = b.terminologyId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity AttributeName - domainId</name>
                      <value>
                        SELECT domainId, terminology, version
                        FROM
                        attribute_names a
                        WHERE domainId IS NOT NULL AND NOT
                        EXISTS
                        (SELECT * FROM concepts
                        b
                        WHERE a.terminology =
                        b.terminology
                        AND a.version =
                        b.version
                        AND a.domainId =
                        b.terminologyId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity AttributeName - rangeId</name>
                      <value>
                        SELECT rangeId, terminology, version
                        FROM
                        attribute_names a
                        WHERE rangeId IS NOT NULL AND NOT
                        EXISTS
                        (SELECT * FROM concepts
                        b
                        WHERE a.terminology =
                        b.terminology
                        AND a.version =
                        b.version
                        AND a.rangeId =
                        b.terminologyId);
                      </value>
                    </property>

                    <!-- Applies to UMLS, but not necessarily other loads:: <property> 
                      <name>Referential integrity RootTerminology - preferredName</name> <value> SELECT 
                      preferredName, terminology FROM root_terminologies a WHERE NOT EXISTS (SELECT * FROM 
                      atoms b WHERE a.terminology = b.terminology AND a.preferredName = b.name); </value> 
                      </property> -->

                    <!-- Applies to UMLS, but not necessarily other loads:: <property> 
                      <name>Referential integrity RootTerminology - hierarchicalName</name> <value> SELECT 
                      hierarchicalName, terminology FROM root_terminologies a WHERE NOT EXISTS (SELECT 
                      * FROM atoms b WHERE a.terminology = b.terminology AND a.hierarchicalName = b.name); 
                      </value> </property> -->

                    <property>
                      <name>Referential integrity RootTerminology
                        -
                        synonymousNames</name>
                      <value> SELECT b.synonymousNames, terminology FROM
                        root_terminologies
                        a, RootTerminologyJpa_synonymousNames
                        b WHERE a.id =
                        b.RootTerminologyJpa_id AND
                        NOT EXISTS
                        (SELECT * FROM atoms c WHERE a.terminology =
                        c.terminology
                        AND b.synonymousNames
                        = c.name);
                      </value>
                    </property>

                    <!-- Applies to UMLS, but not necessarily other loads:: <property> 
                      <name>Referential integrity Terminology - preferredName</name> <value> SELECT preferredName, 
                      terminology, version FROM terminologies a WHERE NOT EXISTS (SELECT * FROM atoms b 
                      WHERE a.terminology = b.terminology AND a.version = b.version AND a.preferredName 
                      = b.name); </value> </property> -->

                    <property>
                      <name>Referential integrity Terminology - synonymousNames</name>
                      <value>
                        SELECT synonymousNames, terminology, version
                        FROM
                        terminologies a, TerminologyJpa_synonymousNames b
                        WHERE
                        a.id = b.TerminologyJpa_id
                        AND NOT EXISTS
                        (SELECT * FROM
                        atoms c
                        WHERE a.terminology = c.terminology
                        AND a.version
                        = c.version
                        AND b.synonymousNames = c.name);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity AdditionalRelationshipType -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        additional_relationship_types a
                        WHERE NOT EXISTS
                        (SELECT *
                        FROM terminologies b
                        WHERE a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity AttributeName -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM attribute_names a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>


                    <property>
                      <name>Referential integrity GeneralMetadataEntry -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        general_metadata_entries a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity LabelSet - terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM label_sets a
                        WHERE
                        NOT
                        EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology
                        = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Language - terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM languages a
                        WHERE
                        NOT
                        EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology
                        = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity PropertyChain -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM property_chains a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity RelationshipType -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM relationship_types
                        a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity SemanticType -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM semantic_types a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity TermType - terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM term_types a
                        WHERE
                        NOT
                        EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology
                        = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <!-- Content Queries -->

                    <!-- CODES are managed differently now:: <property> <name>Referential 
                      integrity Atom - codeId</name> <value> SELECT codeId, terminology, version FROM atoms 
                      a WHERE codeId != '' AND NOT EXISTS (SELECT * FROM codes b WHERE a.terminology = 
                      b.terminology AND a.version = b.version AND a.codeId = b.terminologyId); </value> 
                      </property> -->
                    <property>
                      <name>Referential integrity Atom - conceptId</name>
                      <value>
                        SELECT conceptId, terminology, version
                        FROM atoms a
                        WHERE conceptId != ''
                        AND NOT EXISTS
                        (SELECT * FROM
                        concepts b
                        WHERE
                        a.terminology =
                        b.terminology
                        AND a.version
                        = b.version
                        AND a.conceptId =
                        b.terminologyId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Atom - descriptorId</name>
                      <value>
                        SELECT descriptorId, terminology, version
                        FROM atoms
                        a
                        WHERE descriptorId != ''
                        AND NOT EXISTS
                        (SELECT * FROM
                        descriptors b
                        WHERE
                        a.terminology =
                        b.terminology
                        AND
                        a.version = b.version
                        AND a.descriptorId
                        =
                        b.terminologyId);
                      </value>
                    </property>

                    <!-- UMLS load stringClassId but not string_class entries:: <property> 
                      <name>Referential integrity Atom - lexicalClassId</name> <value> SELECT lexicalClassId, 
                      terminology, version FROM atoms a WHERE lexicalClassId IS NOT NULL AND lexicalClassId 
                      != '' AND NOT EXISTS (SELECT * FROM lexical_classes b WHERE a.terminology = b.terminology 
                      AND a.version = b.version AND a.lexicalClassId = b.terminologyId); </value> </property> -->

                    <!-- UMLS load stringClassId but not string_class entries:: <property> 
                      <name>Referential integrity Atom - stringClassId</name> <value> SELECT stringClassId, 
                      terminology, version FROM atoms a WHERE stringClassId IS NOT NULL AND stringClassId 
                      != '' AND NOT EXISTS (SELECT * FROM string_classes b WHERE a.terminology = b.terminology 
                      AND a.version = b.version AND a.stringClassId = b.terminologyId); </value> </property> -->

                    <property>
                      <name>Referential integrity Atom - language</name>
                      <value>
                        SELECT language, terminology, version
                        FROM atoms a
                        WHERE NOT EXISTS
                        (SELECT * FROM languages b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version
                        AND a.language = b.abbreviation)
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Atom - termType</name>
                      <value>
                        SELECT termType, terminology, version
                        FROM atoms a
                        WHERE NOT EXISTS
                        (SELECT * FROM term_types b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version
                        AND a.termType = b.abbreviation)
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Atom - alternateConceptId</name>
                      <value>
                        SELECT b.conceptTerminologyIds, terminology,
                        version
                        FROM atoms a, AtomJpa_conceptTerminologyIds b
                        WHERE a.id = b.AtomJpa_id
                        AND NOT EXISTS
                        (SELECT * FROM
                        concepts c
                        WHERE b.conceptTerminologyIds_KEY =
                        c.terminology
                        AND b.conceptTerminologyIds =
                        c.terminologyId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Attribute - name</name>
                      <value>
                        SELECT name, terminology, version
                        FROM attributes a
                        WHERE NOT EXISTS
                        (SELECT * FROM attribute_names b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version
                        AND a.name = b.abbreviation)
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity SemanticTypeComponent -
                        semanticType</name>
                      <value>
                        SELECT semanticType, terminology, version
                        FROM
                        semantic_type_components a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        semantic_types b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version
                        AND a.semanticType =
                        b.expandedForm)
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Code - name</name>
                      <value>
                        SELECT name, terminology, version
                        FROM codes a
                        WHERE
                        NOT EXISTS
                        (SELECT * FROM atoms b
                        WHERE a.terminology =
                        b.terminology
                        AND a.version = b.version
                        AND a.name =
                        b.name
                        AND a.terminologyId = b.codeId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Code - labels</name>
                      <value>
                        SELECT labels, terminology, version
                        FROM codes a,
                        CodeJpa_labels b
                        WHERE a.id = b.CodeJpa_id
                        AND NOT EXISTS
                        (SELECT * FROM label_sets c
                        WHERE a.terminology =
                        c.terminology
                        AND a.version = c.version
                        AND b.labels =
                        c.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Concept - name</name>
                      <value>
                        SELECT name, terminology, version
                        FROM concepts a
                        WHERE NOT EXISTS
                        (SELECT * FROM atoms b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version
                        AND a.name = b.name
                        AND a.terminologyId = b.conceptId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Concept - labels</name>
                      <value>
                        SELECT labels, terminology, version
                        FROM concepts a,
                        ConceptJpa_labels b
                        WHERE a.id = b.ConceptJpa_id
                        AND NOT
                        EXISTS
                        (SELECT * FROM label_sets c
                        WHERE a.terminology =
                        c.terminology
                        AND a.version = c.version
                        AND b.labels =
                        c.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Descriptor - name</name>
                      <value>
                        SELECT name, terminology, version
                        FROM descriptors a
                        WHERE NOT EXISTS
                        (SELECT * FROM atoms b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version
                        AND a.name = b.name
                        AND a.terminologyId =
                        b.descriptorId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Descriptor - labels</name>
                      <value>
                        SELECT labels, terminology, version
                        FROM descriptors
                        a,
                        DescriptorJpa_labels b
                        WHERE a.id = b.DescriptorJpa_id
                        AND NOT EXISTS
                        (SELECT * FROM label_sets c
                        WHERE
                        a.terminology = c.terminology
                        AND a.version = c.version
                        AND b.labels = c.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity LexicalClass - name</name>
                      <value>
                        SELECT name, terminology, version
                        FROM
                        lexical_classes a
                        WHERE NOT EXISTS
                        (SELECT * FROM atoms b
                        WHERE a.terminology = b.terminology
                        AND a.version =
                        b.version
                        AND a.name = b.name
                        AND a.terminologyId =
                        b.lexicalClassId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity LexicalClass - labels</name>
                      <value>
                        SELECT labels, terminology, version
                        FROM
                        lexical_classes a, LexicalClassJpa_labels b
                        WHERE a.id =
                        b.LexicalClassJpa_id
                        AND NOT EXISTS
                        (SELECT * FROM
                        label_sets c
                        WHERE a.terminology = c.terminology
                        AND
                        a.version = c.version
                        AND b.labels = c.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity StringClass - name</name>
                      <value>
                        SELECT name, terminology, version
                        FROM
                        string_classes a
                        WHERE NOT EXISTS
                        (SELECT * FROM atoms b
                        WHERE a.terminology = b.terminology
                        AND a.version =
                        b.version
                        AND a.name = b.name
                        AND a.terminologyId =
                        b.stringClassId);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity StringClass - labels</name>
                      <value>
                        SELECT labels, terminology, version
                        FROM
                        string_classes a, StringClassJpa_labels b
                        WHERE a.id =
                        b.StringClassJpa_id
                        AND NOT EXISTS
                        (SELECT * FROM
                        label_sets c
                        WHERE a.terminology = c.terminology
                        AND
                        a.version = c.version
                        AND b.labels = c.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Atom - terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM atoms a
                        WHERE NOT
                        EXISTS
                        (SELECT * FROM terminologies b
                        WHERE a.terminology
                        = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity AtomRelationship -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM atom_relationships
                        a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity AtomSubset -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM atom_subsets a
                        WHERE
                        NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity AtomSubsetMember -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM atom_subset_members
                        a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Attribute -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM attributes a
                        WHERE
                        NOT
                        EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Code - terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM codes a
                        WHERE NOT
                        EXISTS
                        (SELECT * FROM terminologies b
                        WHERE a.terminology
                        = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity CodeRelationship -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM code_relationships
                        a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity CodeTransitiveRelationship -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        code_transitive_rels a
                        WHERE NOT EXISTS
                        (SELECT *
                        FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity CodeTreePosition -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM code_tree_positions
                        a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>


                    <property>
                      <name>Referential integrity Concept - terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM concepts a
                        WHERE NOT
                        EXISTS
                        (SELECT * FROM terminologies b
                        WHERE a.terminology
                        = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity ConceptRelationship -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        concept_relationships a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity ConceptTransitiveRelationship
                        - terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        concept_transitive_rels a
                        WHERE NOT EXISTS
                        (SELECT
                        * FROM
                        terminologies b
                        WHERE a.terminology =
                        b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity ConceptTreePosition -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        concept_tree_positions a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity ConceptSubset -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM concept_subsets a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity ConceptSubsetMember -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        concept_subset_members a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Definition -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM definitions a
                        WHERE
                        NOT
                        EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity Descriptor -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM descriptors a
                        WHERE
                        NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity DescriptorRelationship -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        descriptor_relationships a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity
                        DescriptorTransitiveRelationship - terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        descriptor_transitive_rels a
                        WHERE NOT EXISTS
                        (SELECT *
                        FROM terminologies b
                        WHERE a.terminology =
                        b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity DescriptorTreePosition -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        descriptor_tree_positions a
                        WHERE NOT EXISTS
                        (SELECT *
                        FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity GeneralConceptAxiom -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        general_concept_axioms a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity LexicalClass -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM lexical_classes a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity SemanticTypeComponent -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM
                        semantic_type_components a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        terminologies b
                        WHERE a.terminology = b.terminology
                        AND
                        a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity StringClass -
                        terminology,version</name>
                      <value>
                        SELECT terminology, version
                        FROM string_classes a
                        WHERE NOT EXISTS
                        (SELECT * FROM terminologies b
                        WHERE
                        a.terminology = b.terminology
                        AND a.version = b.version);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity CodeRelationship -
                        relationshipType</name>
                      <value>
                        SELECT relationshipType, terminology, version
                        FROM
                        code_relationships a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        relationship_types b
                        WHERE a.terminology = b.terminology
                        AND a.version = b.version
                        AND a.relationshipType =
                        b.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity CodeRelationship -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType, terminology,
                        version
                        FROM code_relationships a
                        WHERE
                        additionalRelationshipType != ''
                        AND NOT EXISTS
                        (SELECT
                        *
                        FROM additional_relationship_types b
                        WHERE
                        a.terminology
                        =
                        b.terminology
                        AND a.version = b.version
                        AND
                        a.additionalRelationshipType = b.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity CodeTreePosition -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType, terminology,
                        version
                        FROM code_tree_positions a
                        WHERE
                        additionalRelationshipType != ''
                        AND NOT EXISTS
                        (SELECT
                        *
                        FROM additional_relationship_types b
                        WHERE
                        a.terminology
                        =
                        b.terminology
                        AND a.version = b.version
                        AND
                        a.additionalRelationshipType = b.abbreviation);
                      </value>
                    </property>


                    <property>
                      <name>Referential integrity ConceptRelationship -
                        relationshipType</name>
                      <value>
                        SELECT DISTINCT relationshipType, terminology,
                        version
                        FROM
                        concept_relationships a
                        WHERE NOT EXISTS
                        (SELECT * FROM
                        relationship_types b
                        WHERE a.terminology =
                        b.terminology
                        AND a.version = b.version
                        AND
                        a.relationshipType =
                        b.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity ConceptRelationship -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType, terminology,
                        version
                        FROM concept_relationships a
                        WHERE
                        additionalRelationshipType != ''
                        AND NOT EXISTS
                        (SELECT *
                        FROM additional_relationship_types b
                        WHERE
                        a.terminology =
                        b.terminology
                        AND a.version = b.version
                        AND
                        a.additionalRelationshipType = b.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity ConceptTreePosition -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType, terminology,
                        version
                        FROM concept_tree_positions a
                        WHERE
                        additionalRelationshipType != ''
                        AND NOT EXISTS
                        (SELECT *
                        FROM additional_relationship_types b
                        WHERE
                        a.terminology =
                        b.terminology
                        AND a.version = b.version
                        AND
                        a.additionalRelationshipType = b.abbreviation);
                      </value>
                    </property>


                    <property>
                      <name>Referential integrity DescriptorRelationship -
                        relationshipType</name>
                      <value>
                        SELECT relationshipType, terminology, version
                        FROM
                        descriptor_relationships a
                        WHERE
                        additionalRelationshipType != ''
                        AND NOT EXISTS
                        (SELECT *
                        FROM
                        relationship_types b
                        WHERE a.terminology =
                        b.terminology
                        AND a.version = b.version
                        AND
                        a.relationshipType =
                        b.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity DescriptorRelationship -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType, terminology,
                        version
                        FROM descriptor_relationships a
                        WHERE
                        additionalRelationshipType != ''
                        AND NOT EXISTS
                        (SELECT *
                        FROM additional_relationship_types b
                        WHERE
                        a.terminology =
                        b.terminology
                        AND a.version = b.version
                        AND
                        a.additionalRelationshipType = b.abbreviation);
                      </value>
                    </property>

                    <property>
                      <name>Referential integrity DescriptorTreePosition -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType, terminology,
                        version
                        FROM descriptor_tree_positions a
                        WHERE
                        additionalRelationshipType != ''
                        AND NOT EXISTS
                        (SELECT *
                        FROM additional_relationship_types b
                        WHERE
                        a.terminology =
                        b.terminology
                        AND a.version = b.version
                        AND
                        a.additionalRelationshipType = b.abbreviation);
                      </value>
                    </property>

                    <!-- Semantic QA -->

                    <property>
                      <name>Duplicate AtomRelationship</name>
                      <value>
                        SELECT from_id, relationshipType,
                        additionalRelationshipType, to_id, relGroup
                        FROM
                        atom_relationships a
                        WHERE obsolete = 0
                        GROUP BY from_id,
                        relationshipType,
                        additionalRelationshipType, to_id,
                        relGroup
                        HAVING
                        count(*)>1;
                      </value>
                    </property>

                    <property>
                      <name>Duplicate CodeRelationship</name>
                      <value>
                        SELECT from_id, relationshipType,
                        additionalRelationshipType, to_id, relGroup
                        FROM
                        code_relationships a
                        WHERE obsolete = 0
                        GROUP BY from_id,
                        relationshipType,
                        additionalRelationshipType, to_id,
                        relGroup
                        HAVING
                        count(*)>1;
                      </value>
                    </property>

                    <!-- For UMLS Load, we don't distinguish SNOMED inferred/stated 
                      relationships, put in special exception -->
                    <property>
                      <name>Duplicate ConceptRelationship</name>
                      <value>
                        SELECT from_id, relationshipType,
                        additionalRelationshipType, to_id, relGroup, stated,
                        inferred
                        FROM
                        concept_relationships
                        WHERE obsolete = 0
                        AND terminology != 'SNOMEDCT_US'
                        GROUP BY from_id,
                        relationshipType,
                        additionalRelationshipType, to_id,
                        relGroup,
                        stated,inferred
                        HAVING
                        count(*)>1;
                      </value>
                    </property>

                    <property>
                      <name>Duplicate DescriptorRelationship</name>
                      <value>
                        SELECT from_id, relationshipType,
                        additionalRelationshipType, to_id, relGroup
                        FROM
                        descriptor_relationships
                        WHERE obsolete = 0
                        GROUP BY
                        from_id,
                        relationshipType, additionalRelationshipType,
                        to_id,
                        relGroup
                        HAVING count(*)>1;
                      </value>
                    </property>

                    <property>
                      <name>Relationship type without inverse</name>
                      <value>
                        SELECT abbreviation, expandedForm from
                        relationship_types a
                        WHERE inverse_id IS NULL;
                      </value>
                    </property>

                    <property>
                      <name>Additional relationship type without inverse</name>
                      <value>
                        SELECT abbreviation, expandedForm from
                        additional_relationship_types a
                        WHERE inverse_id IS NULL;
                      </value>
                    </property>

                    <!-- Branching QA - TBD -->


                    <!-- Validate projects -->
                    <!-- Validate release info -->

                  </queries>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>


  </profiles>
</project>